"""# 第一讲 软件工程学概论 - ## 软件 - ###定义

-   软件 = 程序 + 数据 + 文档
    -   程序——计算机指令集
    -   数据 ——支持程序的数据及其结构
    -   文档 ——各类文档制品
-   软件是:
    -   人造产品（制品、工件）
    -   脑力劳动的结晶"""
"""# 第一讲 软件工程学概论 - ## 软件 - ###分类

-   分类依据很多
    -   规模、领域、成本投入、…
-   从受众的角度，分为:
    -   涉众软件
        -   面向广大用户群体
        -   如：MSOffice、Linux、…
    -   定制软件
        -   面向特定用户或用户组织
        -   如：在线银行系统、特定硬件的驱动软件、…"""
"""# 第一讲 软件工程学概论 - ## 软件 - ### 特征 - ####基本特征

-   非物质, 不遵循物理定律
-   逻辑实体, 不可触摸
-   无磨损 → 故障率曲线
-   手工开发, 过程复杂
-   维护成本高
-   充满创造性, 因而唯一
-   复制成本极低"""
"""# 第一讲 软件工程学概论 - ## 软件 - ### 特征 - ####突出特征

-   软件是复杂的！
    -   软件是迄今为止最复杂的人造产品 ——F. Brooks
-   软件是频变的！
-   软件是商品！
    -   软件无关乎比特、字节和协 
        议，仅关乎利润和损益——LouisGerstner"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件危机 - ####概念

-   “软件危机”
    -   1968年NATO-SE会议首次正式使用
    -   原意：低下的软件生产效率难以满足日益 
        快速增长的计算需求的现象
    -   泛指：如下典型现象：
        -   软件生产率低
        -   成本高
        -   质量低
        -   风险高
        -   失败率高
        -   …"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件危机 - ####为什么存在？

-   主因一：软件的固有复杂性

    软件及其开发实践都极其复杂，且越来越复杂。
-   主因二：人的局限性

    事务越复杂，认知和处理难度就都越大。
-   还有，软件重要性的增强

    不重要的事物当然没有危机（Why ？！）
-   “危机” --- 不恰当
    -   暗示一种短期的、急性的严重问题
    -   上述问题则是长期的、慢性的
    -   近年常用“软件困扰”或“软件苦恼”来替换"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件危机 - ####工程化解决方法

-   为了应对“软件危机”, 专家们主张  以工程化方法开发软件产品,  

    即 软件工程(SE)
    -   该词于1968年NATO会议首次使用
    -   力求辟除以往实践的“非工程”特征
-   SE主题:
    -   控制软件及其开发过程的复杂性
    -   从而消减软件危机及其负面影响"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件工程 - ####定义

-   软件工程（SE）指科学知识和工程方法 
    在软件开发、维护和演化过程中的系统 
    应用，即软件的工程化。
    -   为应对软件危机而提出"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件工程 - ####核心问题

工程师如何以快速、便宜和高质量的方式开发出正确的软件产品？"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件工程 - ####魔鬼四角

-   魔鬼四角是：成本，时间，功能，质量
-   “四角”之间总存在冲突或制约关系，无法全被完整有效地满足。
-   在传统“魔鬼三角”之上

    新增了“功能”：

    直接影响其他三角

    客户的首要关注对象

    用户的首要关注对象
-   事实：产品的大部分功能都没能准确映射用户需求。(之后阐述)"""
"""# 第一讲 软件工程学概论 - ## 软件工程 - ### 软件工程 - ####四大挑战

-   规模
    -   待开发软件的规模越大，项目失败率就越高。
    -   DeRemer规模定律：

        能有效用于小型软件产品和项目的工程技术和经验都不能同等有效地应用于大型软件产品和项目。
-   生产率与质量
    -   软件危机的典型体现：
        -   低生产率
        -   低质量
    -   软件的生产率与质量之间存在必然联系。
        -   Brooks“银弹”定律
        -   Mills生产率定律
    -   “银弹”：
        -   原意：能够在十年内提高软件生产率、可靠性和简化程度十倍以上的工程技术
        -   泛指：能够在短时间内迅速而显著改善软件生产率和质量的技术、过程、语言或工具
        -   Brooks“银弹”定律

            软件开发没有“银弹”，即不存在能够在短时间内显著改善软件生产率和质量的技术、过程、语言和工具。
    -   Mills生产率定律

        软件的生产率与质量存在紧密关联关系；一般的，低质量软件的生产率肯定不高。
-   可重复性：
    -   软件过程欠缺可重复性
        -   受影响的因子过多，无法控制
    -   工程师和团队也无法保持稳定的生产性能
        -   智力劳动本身就缺乏稳定性
    -   学者们普遍认为，“可重复性”是本世纪软件工程研究和实践所要着重关注的议题。
    -   警告：实践者不是机器人，对于创造性工作，当然无法表现出稳定的工作效能。
-   频变
    -   变更创造一切，但同时又毁掉一切。
    -   回顾上一讲的“软件频变性”常识：

        软件必然会持续变更，且还将更加频繁。 变更的影响范围必须得到有效控制，以避免对软件整体造成不必要的负面影响。"""
"""# 第一讲 软件工程学概论 - ## 软件工程学 - ###学科性质

-   软件工程的学科特征
    -   独特: 独特的对象---软件及相关制品
    -   艺术特征: 过程充满创造性, 不可重复
    -   工艺特征: 长期被认为是工艺活
    -   尚未成熟: 缺乏规范以及对规范的认可
    -   工程学科: 使用工程化方法和过程
-   警告：目前，软件工程学科尚未成熟。"""
"""# 第一讲 软件工程学概论 - ## 软件工程学 - ###学科发展简史

-   1950年代：软件出现，天才程序员，小程序
-   1960年代：编程难，软件危机，软件工程
-   1970年代：过程模型，开发原则，过程工程化
-   1980年代：结构化方法，面向对象
-   1990年代：需求管理，架构设计，质量控制
-   2000年代：敏捷方法，构件组装"""
"""# 第一讲 软件工程学概论 - ## 软件工程学 - ###学科知识体系

-   “软件工程知识体”指南(SWEBOK)第3版
    -   定义软件工程知识框架，包括15个知识域

技术域：软件需求、软件设计、软件构造、软件测试、软件维护

管理域：变更管理、工程管理、工程过程、软件工程模型与方法、软件质量

基础域：工程经济学、计算基础、数学基础、工程基础、软件工程专业实践"""
"""# 第一讲 软件工程学概论 - ## 软件工程学 - ###核心知识体

-   核心知识，即在学科知识体系中处于核心地位的知识
-   常识：专业实践所需的最基本知识
    -   如：软件复杂性和频变性常识
-   理念：经长期实践和反思而形成的思想观念的抽象概括
    -   如：分而治之和拥抱变更理念
-   法则：描述“怎么做”(即“How”)
    -   如：关注点分离法则
-   定律：描述“某现象是什么或怎么发生”(即“What”)
    -   如：DeRemer定律、银弹定律、…
-   最佳实践：由法则衍生的应用或技术实例
    -   如：需求分簇实践"""
"""# 第一讲 软件工程学概论 - ## 软件工程师 - ###21世纪的工程师应该是什么样的？

一边学习、一边决策、一边行动！

-   本世纪的工程师应当具备如下四项特征：
    -   什么都能懂
    -   什么都能做
    -   与任何地方的任何人都能协同工作
    -   富有想象力且能将梦想变成现实"""
"""# 第一讲 软件工程学概论 - ## 软件工程师 - ###范围与分类

-   软件工程师：
    -   从事软件产品开发、维护或演化的专业人才及职业
    -   需求工程师
    -   软件设计师 (包括架构和界面设计师)
    -   程序员
    -   质量工程师 (包括测试工程师)
    -   维护工程师
    -   …
-   软件管理者
    -   区别于一般的工程师"""
"""# 第一讲 软件工程学概论 - ## 软件工程师 - ###职业路线图—以IBM为例

程序员 (副工程师) → (项目)  工程师

→项目经理→职能经理→系统经理→部门主管

→高级工程师→首席工程师→技术顾问→技术院士"""
"""# 第一讲 软件工程学概论 - ## 软件工程师 - ###职业道德

-   IEEE—ACM颁布了《软件工程师职业道德和操守规范》， 
    给定了如下方面的职业道德：
-   对待公众：
    -   当以公众利益为至上目标
-   对待客户和雇主：
    -   在不违背公众利益的前提下，致力于满足客户和雇主的最高利益
-   对待产品：
    -   确保产品及相关改进都符合最高的专业标准
-   对待判断：
    -   维护职业判断的完整性和独立性
-   对待管理：
    -   管理者应提倡并践行合乎道德规范的软件工程管理"""
"""# 第一讲 软件工程学概论 - ## 软件工程师 - ###微软的十大工程胜任力特征

-   问题分析和解决能力
-   精湛的工程技术
-   执着追求质量
-   充满自信
-   能跨界合作
-   面向客户的创新
-   懂得管理个体和项目
-   有战略远见
-   冲击力和影响力
-   有人际意识"""
